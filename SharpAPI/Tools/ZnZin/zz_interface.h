void setWindowInstance(HINSTANCE hInstance);
int setScreen(int Width, int Height, int Depth, int bUseFullScreen);
void setBuffer(int Width, int Height, int Depth);
int useHardwareVertexProcessing(int bUse);
int useVertexShader(int bUse);
int usePixelShader(int bUse);
int useWireMode(int bUse);
void setClearColor(float fClearColorX, float fClearColorY, float fClearColorZ);
int setShadowmapSize(int iSize);
int setShadowmapBlurType(int iBlurType);
void useShadowmap(int bUse);
void useGlow(int bUse);
void useFullSceneGlow(int bUse);
void setGlowmapSize(int iSize);
void setGlowColor(float fColorR, float fColorG, float fColorB);
void setFullSceneGlowColor(float fColorR, float fColorG, float fColorB);
void setFullSceneGlowType(int iType);
void setShadowmapColor(float fColorR, float fColorG, float fColorB);
int setMipmapFilter(int FilterType);
int setMipmapLevel(int Level);
int setMinFilter(int FilterType);
int setMagFilter(int FilterType);
void setRendererMinFilter(int iFilter);
void setRendererMagFilter(int iFilter);
int useObjectSorting(int bUse);
int usePolygonSorting(int bUse);
void useFog(int bUse);
int setFullSceneAntiAliasing(int Type);
int useCull(int bCull);
int useDrawBoundingVolume(int bDraw);
int useDrawViewFrustum(int bDraw);
int setDrawShadowmapViewport(int bDraw);
int useDrawTextRect(int bDraw);
int useRefreshCull(int bRefresh);
int setTimeDelay(int Delay);
int setTextureLoadingScale(int iScale);
HNODE findNode(ZSTRING pNodeName);
HNODE loadMesh(ZSTRING pMeshName, ZSTRING pMeshPath);
int unloadMesh(HNODE hMesh);
void setMeshType(HNODE hMesh, int bDynamic);
HNODE loadColormapMaterial(ZSTRING pMaterialName, HNODE hShader, ZSTRING pMapFileName);
HNODE loadNullColormapMaterial(ZSTRING pMaterialName, HNODE hShader, int iWidth, int iHeight);
int unloadMaterial(HNODE hMaterial);
int setMaterialUseAlpha(HNODE hMaterial,int bUseAlpha);
int setMaterialUseTwoSide(HNODE hMaterial, int bUseTwoSide);ZZ_SCRIPT
int setMaterialUseAlphaTest(HNODE hMaterial, int bUseAlphaTest);
int setMaterialAlphaRef(HNODE hMaterial, int iAlphaRef);
int setMaterialGlow(HNODE hMaterial, int iGlowType, float fRed, float fGreen, float fBlue);
HNODE loadVisible(ZSTRING pVisibleName, HNODE hMesh, HNODE hMaterial, HNODE hLight);
HNODE loadVisibleEx(ZSTRING pVisibleName, HNODE hMesh, HNODE hMaterial, HNODE hLight);
HNODE loadAnimatable(ZSTRING pAnimatableName, HNODE hMesh, HNODE hMotion, HNODE hMaterial, HNODE hLight);
int unloadVisible(HNODE hVisible);
int unloadAnimatable(HNODE hAnimatable);
int unloadTrail(HNODE hTrail);
int setObbox(HNODE hVisible, float LocalCenterX, float LocalCenterY, float LocalCenterZ, float HalfLengthX, float HalfLengthY, float HalfLengthZ);
HNODE loadMorpher(ZSTRING pMorpherName, HNODE hMesh, HNODE hMotion, HNODE hMaterial, HNODE hLight);
int unloadMorpher(HNODE hMorpher);
HNODE loadSkeleton(ZSTRING pSkeletonName, ZSTRING pSkeletonPath);
HNODE loadModel(ZSTRING pModelName, HNODE hSkeleton, HNODE hMotion, float ScaleInLoad);
int unloadSkeleton(HNODE hSkeleton);
int unloadModel(HNODE hModel);
int addRenderUnit(HNODE hVisible, HNODE hMesh, HNODE hMaterial, HNODE hLight);
int clearRenderUnit(HNODE hVisible);
int getNumRenderUnit(HNODE hVisible);
int linkNode(HNODE hParent, HNODE hNode);
int unlinkNode(HNODE hNode);
int linkBone(HNODE hParentModel, HNODE hNode, int iSkel);
int linkDummy(HNODE hParentModel, HNODE hNode, int iDummy);
void InputSceneModelDummyAxis(HNODE hNode, int Index, float Size);
HNODE loadLight(ZSTRING pLightName);
void setDefaultLight(HNODE hLight);
HNODE getDefaultLight(HNODE hLight);
int unloadLight(HNODE hLight);
HNODE loadLightPoint(ZSTRING pLightName);
int setLight(HNODE hLight, ZSTRING pProperty, float fValue1, float fValue2, float fValue3);
int setQuaternion(HNODE hVisible, float qW, float qX, float qY, float qZ);
int setAxisAngle(HNODE hVisible, float AngleDegree, float AxisX, float AxisY, float AxisZ);
int setPosition(HNODE hVisible, float PositionX, float PositionY, float PositionZ);
int setPositionVec3(HNODE hVisible, float vPosition[3]);
int setScale(HNODE hVisible, float ScaleX, float ScaleY, float ScaleZ);
int setRotationQuat(HNODE hVisible, float vRotation[4]);
int setRotationQuat2(HNODE hVisible, float vRotation[4]);
float getVisibility(HNODE hVisible);
int setVisibility(HNODE hVisible, float fVisibility);
int setVisibilityRecursive(HNODE hVisible, float fVisibility);
void setLightingRecursive(HNODE hVisible, HNODE hLight);
int setShadowOnOff(HNODE hVisible, bool bShadowOnOff);
int setShadowOnOffRecursive(HNODE hVisible, bool bShadowOnOff);
int setShaderFormat(HNODE hShader, ZSTRING pVertexShaderPath, ZSTRING pPixelShaderPath, int iFormat);
HNODE loadShader(ZSTRING pShaderName, ZSTRING pVertexShaderPath, ZSTRING pPixelShaderPath, int bUseBinary, int iVertexFormat);
int unloadShader(HNODE hShader);
HNODE loadMotion(ZSTRING pMotionName, ZSTRING pMotionFileName, int bUseLoop, int InterpTypePosition, int InterpTypeRotation, float Scale, int bForModel);
HNODE loadMotionMixer(ZSTRING pMixMotionName, HNODE hMotionA, HNODE hMotionB);
int unloadMotion(HNODE hMotion);
int attachMotion(HNODE hNode, HNODE hMotion);
int doScript(ZSTRING pScriptName);
void doLog(ZSTRING pLogMessage);
void doLogf(const char * pMsgFormat, ...);
int turnModel(HNODE hModel, float Angle);
HNODE loadCamera(ZSTRING pCameraName, ZSTRING pCameraPath, HNODE hCameraMotion);
int unloadCamera(HNODE hCamera);
int saveCamera(HNODE hCamera, ZSTRING pCameraPath);
int setCameraAspectRatio(HNODE hCamera, float AspectRatio);
HNODE setCameraDefault(HNODE hCamera);
HNODE setCameraLight(HNODE hCamera);
HNODE getCameraDefault(void);
HNODE getCameraLight(void);
int rotateCamera(HNODE hCamera, int AxisType, float AngleDegree);
int dollyCamera(HNODE hCamera, float StepSize);
int beginTrackball(HNODE hCamera, float ScreenX, float ScreenY);
int rotateTrackball(HNODE hCamera, float ScreenX, float ScreenY);
int endTrackball(HNODE hCamera, float ScreenX, float ScreenY);
int beginPan(HNODE hCamera, float ScreenX, float ScreenY);
int doPan(HNODE hCamera, float ScreenX, float ScreenY, float PanSize);
int endPan(HNODE hCamera, float ScreenX, float ScreenY);
int moveCamera(HNODE hCamera, float deviationX, float deviationY, float deviationZ);
void getDefaultCameraMatrix(float * d3d_tm_4x4);
void getDefaultProjectionMatrix(float *d3d_tm_4x4);
float getFps(void);
void setWindowText(ZSTRING pTitle);
int traverseNode(HNODE hNode);
void buildScene(void);
void cullScene(void);
int insertToScene(HNODE hVisible);
int removeFromScene(HNODE hVisible);
int getScreenWidth(void);
int getScreenHeight(void);
int getFullScreen(void);
void setFogColor(float colorR, float colorG, float colorB);
void setFogRange(float rangeStart, float rangeEnd);
void setAlphaFogRange(float rangeStart, float rangeEnd);
int getUseFog(void);
int getUseWireMode(void);
void initZnzin(void);
void destZnzin(void);
int callScriptFunc(ZSTRING funcName, ...);
int attachWindow(const void * window_handle);
int detachWindow(void);
int loadCharacter(ZSTRING characterFileName);
int callInt(ZSTRING funcString);
HNODE callHNODE(ZSTRING funcString);
ZSTRING callString(ZSTRING funcString);
float callFloat(ZSTRING funcString);
ZSTRING getName(HNODE hNode);
int setName(HNODE hNode, ZSTRING pNewName);
int cameraAttachTarget(HNODE hCamera, HNODE hModel);
int cameraDetachTarget(HNODE hCamera);
int cameraUpdate(HNODE hCamera);
int lookAt(HNODE hCamera, float eyeX, float eyeY, float eyeZ, float centerX, float centerY, float centerZ, float upX, float upY, float upZ);
int setCameraPerspective(HNODE hCamera, float fFovY, float fAspectRatio, float fNear, float fFar);
int setCameraOrthogonal(HNODE hCamera, float fWidth, float fHeight, float fNear, float fFar);
void setCameraFov(HNODE hCamera, float fFovY);
HNODE loadTerrainMesh(ZSTRING pMeshName, float fOrigX, float fOrigY, int iDetailLevel, int iUVType0, int iUVType1, int iWidth, float * pHeightList, int iMapSize, int iBlockSize);
HNODE loadTerrainMaterial(ZSTRING pMatName, HNODE hShader, HNODE pFirstTexture, HNODE pSecondTexture, HNODE pLightTexture);
int isA(HNODE hNode, int iType);
int getTypeOf(HNODE hNode);
int getNumSceneNode(void);
HNODE getSceneNode(int iIndex);
int inViewfrustum(HNODE hVisible);
int getMotionTotalTime(HNODE hMotion);
int getMotionTotalFrame(HNODE hMotion);
int renderNode(HNODE hNode);
int beginScene(void);
int endScene(void);
void preProcessScene(void);
void postProcessScene(void);
void swapBuffers(void);
void clearScreen(void);
HNODE getDevice(void);
void fadeIn(float fZeroToOne);
void setGammaValue(float fGammaValue);
void renderScene(void);
float getPositionX(HNODE hVisible);
float getPositionY(HNODE hVisible);
float getPositionZ(HNODE hVisible);
int getPosition(HNODE hVisible, float fPositionXYZ[3]);
int getPositionScript(HNODE hVisible);
int setModelMoveVelocity(HNODE hModel, float fVelocity);
float getModelMoveVelocity(HNODE hModel);
int setModelDirection(HNODE hModel, float fAngleDegree, int bImmediate);
int setModelDirectionByPosition(HNODE hModel, float fX, float fY);
void SetModelVirtualTransform(HNODE hModel, float x, float y, float z);
float getModelDirection(HNODE hModel);
int getModelDirectionVector(HNODE hModel, float fDirectionXYZ[3]);
int getModelVelocityDirectionVector(HNODE hModel, float fDirectionXYZ[3]);
int getModelDirectionVectorScript(HNODE hModel);
void setModelBlinkCloseMode(HNODE hModel, bool onoff);
bool getModelBlinkCloseMode(HNODE hModel);
int rotateByVectorAbsolute(HNODE hVisible, const float * fStartXYZ, const float * fEndXYZ);
int rotateByVectorAbsoluteScript(HNODE hVisible, float fStartX, float fStartY, float fStartZ, float fEndX, float fEndY, float fEndZ);
int rotateByVectorRelative(HNODE hVisible, const float fLocalStartAxisXYZ[3], const float fWorldEndTargetXYZ[3]);
int rotateByVectorRelativeVector(HNODE hVisible, const float fLocalStartAxisXYZ[3], const float fWorldEndTargetXYZ[3]);
int rotateByVectorRelativeScript(HNODE hVisible, float fLocalStartAxisX, float fLocalStartAxisY, float fLocalStartAxisZ, float fWorldEndTargetX, float fWorldEndTargetY, float fWorldEndTargetZ);
int activateLog(int bTrueFalse);
int unloadNode(HNODE hModel);
int unloadNodeRecursive(HNODE hNode);
int reloadTextures(void);
int getTimeDiff(void);
float getTimeDiffEx(void);
HNODE loadTerrainBlock(ZSTRING pTerrainBlockName, float fOrigX, float fOrigY, int iDetailLevel, int iUVType0, int iUVType1, float * pHeightList, int iMapSize, int iBlockSize, HNODE hFirstMat, HNODE hSecondMat, HNODE hLightMat, HNODE hTerrainShader, HNODE hLight);
HNODE loadTerrainBlockEx(ZSTRING pTerrainBlockName, float fOrigX, float fOrigY, int iDetailLevel, int iUVType0, int iUVType1, float * pHeightList, float HeightMinMax[2], int iMapSize, int iBlockSize, HNODE hFirstMat, HNODE hSecondMat, HNODE hLightMat, HNODE hTerrainShader, HNODE hLight);
HNODE loadTerrainBlockExt(ZSTRING pTerrainBlockName, float fMinMax[2][3], int iDetailLevel, int iUVType0, int iUVType1, int iWidth, float * pHeightList, int iMapSize, int iBlockSize, HNODE hFirstMat, HNODE hSecondMat, HNODE hLightMat, HNODE hTerrainShader, HNODE hLight);
HNODE loadTerrainBlockRough(ZSTRING pTerrainBlockName, float fMinMax[2][3], int iWidth, float * pHeightList, ZSTRING pTexturePath, HNODE hRoughTerrainShader, HNODE hLight);
int unloadTerrainBlock(HNODE hTerrainBlock);
void unloadTerrainBlockRough(HNODE hTerrainBlockRough);
void setTerrainBlockIndexOrder(HNODE hTerrain, int iType);
int selectNode(HNODE hNode);
float getGlobalFloat(ZSTRING pName);
int setCameraFollowYaw(HNODE hCamera, float fYawDeg);
int setCameraFollowPitch(HNODE hCamera, float fPitch);
int setCameraFollowDistance(HNODE hCamera, float fDistance);
void setCameraFollowDistanceRange(HNODE hCamera, float fMinDistance, float fMaxDistance);
float getCameraFollowYaw(HNODE hCamera);
float getCameraFollowPitch(HNODE hCamera);
float getCameraFollowDistance(HNODE hCamera);
int getCameraEye(HNODE hCamera, float posEye[3]);
int getCameraDir(HNODE hCamera, float dirFront[3]);
int getCameraUp(HNODE hCamera, float dirUp[3]);
int getCameraViewfrustum(HNODE hCamera, float fViewfrustum_Out[6][4]);
int setReceiveFog(HNODE hVisible, int hUseFog);
int setReceiveShadow(HNODE hVisible, int hReceiveShadow);
int setCastShadow(HNODE hVisible, int hCastShadow);
int setCameraFollowMode(HNODE hCamera, int mode_Look0_Back1);
int setUseTimeWeight(int bTrueOrFalse);
int setUseFixedFramerate(int bTrueOrFalse);
int enableRenderState(int bTrueOrFalse);
void setRenderState(ZZ_DWORD dwState, ZZ_DWORD dwValue); 
void setAlphaTest(int iRefValue);
HNODE loadSky(ZSTRING pSkyName, HNODE hMesh, HNODE hMaterial, HNODE hLight);
int unloadSky(HNODE hSky);
int setSkyRotationSpeed(HNODE hSky, int iSkyUnit, float fAngleDegreePerSecond);
int getMotionFrame(HNODE hNode);
float pickScreenX(int screenX, int screenY);
float pickScreenY(int screenX, int screenY);
bool pickScreenXY(int screenX, int screenY, float * worldX, float * worldY);
int intersectRay(HNODE hNode, float originX, float originY, float originZ, float dirX, float dirY, float dirZ, float * pContactPointX, float * pContactPointY, float * pContactPointZ, float * pDistance);
int intersectRay2OBB(float *pOrigin, float *pDirection, float *pCenter, float *pRotation, float xLength, float yLength, float zLength);
int intersectRayScript(HNODE hNode, float originX, float originY, float originZ, float dirX, float dirY, float dirZ);
int intersectNode(HNODE hNodeA, HNODE hNodeB);
int intersectNodeSphereSphere(HNODE hNodeA, HNODE hNodeB);
int intersectNodeTriSphere(HNODE hNodeByTri_In, float vSphereCenter_In[3], float fSphereRadius_In);
int intersectNodeTriSphereMoving(HNODE hNodeByTri_In, float vSphereCenter_In[3], float fSphereRadius_In, float vPrevCenter_In[3], float vClosestCenter_Out[3], float fMaxDistanceSquare_In);
bool intersectRayNodeAABB(HNODE hNodeAABB,float originX, float originY, float originZ, float dirX, float dirY, float dirZ);
bool intersectRayAABB(float vMin[3], float vMax[3],float originX, float originY, float originZ, float dirX, float dirY, float dirZ);
float getCameraEyeX(HNODE hCamera);
float getCameraEyeY(HNODE hCamera);
float getCameraEyeZ(HNODE hCamera);
void getCameraPerspectiveElement(HNODE hCamera, float *fov, float *ratio, float *near, float *far);
HNODE pickNode(int screenX, int screenY, float * pContactPointX, float * pContactPointY, float * pContactPointZ, float * pDistance);
HNODE pickNodeScript(int screenX, int screenY);
int setCameraTargetHeight(HNODE hCamera, float fHeight);
float getFloatArray(int iIndex);
float setFloatArray(int iIndex, float fNewFloat);
int getRay(int screenX, int screenY, float * pOriginX, float * pOriginY, float * pOriginZ, float * pDirectionX, float * pDirectionY, float * pDirectionZ);
int useMultiPass(int bUseMultiPass);
int useLightmap(int bUseLightmap);
void useTerrainLOD(int bUseLOD);
int weldMesh(HNODE hMesh);
int clearMeshMatid(HNODE hMesh);
int generateMeshStrip(HNODE hMesh);
int saveMesh(HNODE hMesh, ZSTRING pSavePath, int bTextMode);
float getWorldHeight(HNODE hNode, float fPointX, float fPointY);
float shootRay(HNODE hVisible, int iNearest, float fOriginX, float fOriginY, float fOriginZ, float fDirX, float fDirY, float fDirZ);
float shootRayVec3(HNODE hVisible, int iNearest, float vOrigin[3], float vDirection[3]);
float shootRayVec3Ex(HNODE hVisible, int iNearest, float vOrigin[3], float vDirection[3], float contactPoint[3], float contactNormal[3], float meshPoint1[3], float meshPoint2[3], float meshPoint3[3]);
int setCollisionLevel(HNODE hVisible, int iLevel);
int getCollisionLevel(HNODE hVisible);
bool getHeightCollisionLevelOnOff(HNODE hVisible);
int setMaterialLightmap(HNODE hMaterial, ZSTRING pLightmapFilename, int iX, int iY, int iWidth, int iHeight);
int isDescendantOf(HNODE hChild, HNODE hParent);
int isDescendantOfType(HNODE hChild, int iType);
HNODE getParent(HNODE hChild);
HNODE loadParticle(ZSTRING pParticleName, ZSTRING pParticleFilename);
HNODE loadParticleFromMem(ZSTRING pParticleName, ZSTRING pParticleMem, int iMemSize);
int unloadParticle(HNODE hParticle);
int controlParticle(HNODE hParticle, int iControl); 
int collectByMinMax(float fMinX, float fMinY, float fMinZ, float fMaxX, float fMaxY, float fMaxZ);
int collectByMinMaxVec3(float fMin[3], float fMax[3]);
int collectByNodeBBox(HNODE hVisible);
int collectBySphere(float vCenter[3], float fDistance);
HNODE getCollectNode(int iNode);
int getParticleState(HNODE hParticle);
int setMaterialShader(HNODE hMaterial, HNODE hShader);
HNODE getMaterialShader(HNODE hMaterial);
HNODE getVisibleMaterial(HNODE hVisible, int iRenderUnit);
int setVisibleMaterial(HNODE hVisible, int iRenderUnit, HNODE hMaterial);
HNODE getVisibleMesh(HNODE hVisible, int iRenderUnit);
int setVisibleMesh(HNODE hVisible, int iRenderUnit, HNODE hMesh);
HNODE getVisibleLight(HNODE hVisible, int iRenderUnit);
int setVisibleLight(HNODE hVisible, int iRenderUnit, HNODE hLight);
int setLightmapBlendStyle(int iBlendStyle);
void updateScene(void);
void setDeltaTime(int iMsecDelta);
void updateSceneTransform(void);
void updateSceneExAfter(void);
void updateSceneEx(void);
void updateSceneMovingCamera();
int applyMotion(HNODE hAnimatable);
int setMaterialZTest(HNODE hMaterial, int bZTest);
int setMaterialZWrite(HNODE hMaterial, int bZWrite);
int setMaterialObjectAlpha(HNODE hMaterial, float fAlpha);
int setMaterialAlphaValue(HNODE hMaterial, float fAlpha);
int setCameraTransparency(float fTransparency);
int setMaterialBlendType(HNODE hMaterial, int iBlendType);
int setMaterialBlendTypeCustom(HNODE hMaterial, int iBlendSrc, int iBlendDest, int iBlendOp);
int setAnimatableSpeed(HNODE hAnimatable, float fSpeed);
float getAnimatableSpeed(HNODE hAnimatable);
int controlAnimatable(HNODE hAnimatable, int iControl);
int getAnimatableState(HNODE hAnimatable);
HNODE loadTrailScript(ZSTRING pName, float fDistancePerPoint, int iDurationInMilliSecond, int bUseCurve, ZSTRING pTexturePath, float fColorRed, float fColorGreen, float fColorBlue, float fColorAlpha, float fSP_X, float fSP_Y, float fSP_Z, float fEP_X, float fEP_Y, float fEP_Z);
HNODE loadTrail(ZSTRING pName, float fDistancePerPoint, int iDurationInMilliSecond, int bUseCurve, ZSTRING pTexturePath, ZZ_COLOR Color, ZZ_VECTOR vStart, ZZ_VECTOR vEnd);
int controlTrail(HNODE hTrail, int iControl);
int getTrailState(HNODE hTrail);
void setDataPath(ZSTRING pDataPath);
int setDrawPriority(HNODE hVisible, int iPriority);
int getDrawPriority(HNODE hVisible);
int getNumDummies(HNODE hModel);
int getNumBones(HNODE hModel);
HNODE getBone(HNODE hModel, int iBoneIndex);
int getStartDelay(HNODE hAnimatable);
int setStartDelay(HNODE hAnimatable, int iDelayMilliSecond);
int setRepeatCount(HNODE hAnimatable, int iRepeatCount);
int getRepeatCount(HNODE hAnimatable);
int linkVisibleWorld(HNODE hParent, HNODE hChild);
int unlinkVisibleWorld(HNODE hVisible);
int setAnimatableFrame(HNODE hAnimatable, int iFrame);
int setAnimatableTime(HNODE hAnimatable, int iTimeMilliSecond);
HNODE getMotion(HNODE hAnimatable);
int popRenderUnit(HNODE hVisible);
int setIncludeClasses(int iIncludeClasses);
int getIncludeClasses(void);
int setExcludeClasses(int iExcludeClasses);
int getExcludeClasses(void);
void worldToScreenScript(float fWorldX, float fWorldY, float fWorldZ);
void worldToScreen(float fWorldX, float fWorldY, float fWorldZ, float * fScreenX, float * fScreenY, float * fScreenZ);
float getModelHeight(HNODE hModel);
HNODE loadOceanBlock(ZSTRING pOceanBlockName, float fOrigX, float fOrigY, float fOrigZ, float fWidth, float fHeight, int iRepeatU, int iRepeatV, HNODE hShader, HNODE hLight);
HNODE loadOceanMaterial(ZSTRING pMatName, HNODE hShader, ZSTRING pFirstTexture);
void resetOceanMaterial(HNODE hMaterial);
int unloadOceanBlock(HNODE hOceanBlock);
int pushTexture(HNODE hMaterial, ZSTRING pTexturePath);
int setOceanBlockInterval(HNODE hOceanBlock, int iIntervalMilliSecond);
int setMeshNumClipFaces(HNODE hMesh, int iNumClipFaces);
int getMeshNumClipFaces(HNODE hMesh);
int setVisibleClipFace(HNODE hVisible, int iClipFace);
int getVisibleClipFace(HNODE hVisible);
int saveToDDS(ZSTRING pFileNameDDS);
int saveToBMP(ZSTRING pFileNameBMP);
int setUserData(HNODE hVisible, HNODE hData);
HNODE getUserData(HNODE hVisible);
float getSliding(HNODE hVisible, float fMin, float fMax, float fNeighborDistance, float fVelocity, float vSliding[3]);
float getSlidingScript(HNODE hVisible, float fMin, float fMax, float fNeighborDistance, float fVelocity);
int getDummyPosition(HNODE hModel, int iDummyIndex, float fPosXYZ[3]);
int getDummyPositionScript(HNODE hModel, int iDummyIndex);
float getTerrainHeight(float fPositionX, float fPositionY);
float setBlendFactor(float fFactor);
int getMeshInfo(HNODE hMesh, int iInfoType);
int buildNormal(HNODE hMesh);
HNODE loadEffect(ZSTRING pEffectName, ZSTRING pEffectFilePath);
int unloadEffect(HNODE hNode);
ZSTRING getRealPath(ZSTRING pPath);
int setMaterialUseSpecular(HNODE hMaterial, int bUseSpecular);
int setBillboard(HNODE hVisible, int bUseBillboard);
int setBillboardOneAxis(HNODE hVisible, int bUseBillboard, int iRotationAxis, int iDirectionAxis);
HNODE getTexture(HNODE hMaterial, int iTextureIndex);
void resetScreen(void);
float getVisibleRadius(HNODE hVisible, int bSelectSmaller);
float getVisibleHeight(HNODE hVisible);
int getModelFront(HNODE hModel, float fPositionXYZ_Out[3]);
int getModelFrontScript(HNODE hModel);
int getVisibleSeethruMode(HNODE hVisible);
void beginProfiler(void);
void endProfiler(ZSTRING pProfilerName);
float quaternionToModelDirection(float fQuatW, float fQuatX, float fQuatY, float fQuatZ);
HNODE loadTerrainBlockTest(ZSTRING pTerrainBlockName, int iX, int iY, int iType, HNODE hFirstMat, HNODE hSecondMat, HNODE hLightMat, HNODE hTerrainShader, HNODE hLight);
int setDelayedLoad(int iDelayedLoad);
int setTextureLoadingFormat(int iFormat);
int setMaxSimultaneousBone(int iMaxBone);
int setDisplayQualityLevel(int iLevel);
int setFramerateRange(int iMinFramerate, int iMaxFramerate);
int useFileTimeStamp(int bUse);
int useMotionInterpolation(int bUse);
int setMotionInterpolationRange(float fDistanceFromCamera);
int useVSync(int bUseVSync);
int setMaterialTextureAddress(HNODE hMaterial, int iStage, int iTextureAddress);
int setMaterialUseLight(HNODE hMaterial, int bUseLight);
int useDebugDisplay(int bUseDebugDisplay);
int setLazyBufferSize(int iTextureSize, int iNormalMeshSize, int iTerrainMeshSize, int iOceanMeshSize);
HNODE loadTexture(ZSTRING pTextureName, ZSTRING pTextureFileName, int iMipLevels, int bUseFilter);
HNODE loadTextureWithPool(ZSTRING pTextureName, ZSTRING pTextureFileName, int iMipLevels, int bUseFilter, int iPoolType);
int unloadTexture(HNODE hTexture);
HNODE getTexturePointer(HNODE hTexture);
HNODE loadFont(ZSTRING pFontIDName, ZSTRING pFontName, int iFontCharset, int iFontSize, int iBold, int iItalic, int iColorR, int iColorG, int iColorB, int iColorA);
HNODE loadFontOutline(ZSTRING pFontIDName, ZSTRING pFontName, int iFontCharset, int iFontSize, int iBold, int iItalic, int iOutlineType, ZZ_COLOR ColorText, ZZ_COLOR ColorOutline);
int unloadFont(HNODE hFont);
int setFontCache(HNODE hFont, int iNumTextures, int iTextureWidth, int iTextureHeight);
int drawFontScript(HNODE hFont, int iX, int iY, ZSTRING pMessage);
int setFontColor(HNODE hFont, int iRed, int iGreen, int iBlue, int iAlpha);
int setFontOutlineColor(HNODE hFont, int iRed, int iGreen, int iBlue, int iAlpha);
ZZ_SIZE getFontTextExtent(HNODE hFont, ZSTRING pText);
int getFontHeight(HNODE hFont);
HNODE loadText(HNODE hFont, int iX, int iY, ZSTRING pMessage);
int unloadText(HNODE hFont, HNODE hText);
int unloadAllText(HNODE hFont);
int beginSprite(int iFlag);
int endSprite(void);
int drawSprite(HNODE hTexture, const ZZ_RECT * pSrcRect, const ZZ_VECTOR *pCenter, const ZZ_VECTOR *pPosition, const ZZ_COLOR Color);
int drawSpriteCover(HNODE hTexture, const ZZ_RECT * pSrcRect, const ZZ_VECTOR *pCenter, const ZZ_VECTOR *pPosition, const ZZ_COLOR OriginColor, const ZZ_COLOR CoverColor, float value);
int getSpriteTextureColor(HNODE hTexture, int iMouseX, int iMouseY, const ZZ_RECT * pSrcRect, const ZZ_VECTOR *pCenter, const ZZ_VECTOR *pPosition, D3DXCOLOR *color);
int inputSpriteSFX(HNODE hTexture, const ZZ_RECT * pSrcRect, const ZZ_VECTOR *pCenter, const ZZ_VECTOR *pPosition, const ZZ_COLOR color, float fade_time1, float fade_time2, float max_time);
void stopSpriteSFX();
bool getSpriteSFXPlayOnOff();
void pauseSpriteSFX(bool onoff);
bool getSpriteSFXPauseOnOff();
HNODE getSpriteSFXCurrentTexNode(); 
int flushSprite(void);
int getTransformSprite(float * d3d_tm_4x4);
int setTransformSprite(const float * d3d_tm_4x4);
int setFileSytem(HNODE hVFS);
int openFileSystem(ZSTRING pIndexFileName);
int closeFileSystem(void);
HNODE fileReadFrom(ZSTRING pFilename);
ZSTRING fileReadWord(HNODE hFile);
int fileClose(HNODE hFile);
int setMotionInterporationInterval(HNODE hMotion, int iMilliSeconds);
int savePrevPosition(HNODE hVisible);
int savePrevRotation(HNODE hVisible);
int getPrevPosition(HNODE hVisible, float fPositionXYZ[3]);
float getPrevPositionX(HNODE hVisible);
float getPrevPositionY(HNODE hVisible);
float getPrevPositionZ(HNODE hVisible);
int getPrevRotation(HNODE hVisible, float fRotationWXYZ[4]);
int getRotationQuad(HNODE hVisible, float fRotationWXYZ[4]);
int getModelShiftPosition(HNODE hModel, float fCmPerSecond, float fWorldPosOut[3]);
int flipModelShiftDirection(HNODE hModel);
float applyGravity(HNODE hVis);
float getWorldObjectHeightInScene(float fWorldX, float fWorldY, float fDefaultHeight);
int drawFontLater(HNODE hFont, int iX, int iY, ZSTRING pMsg);
int drawFontLaterf(HNODE hFont, int iX, int iY, const char * pMsgFormat, ...);
int initSoundSystem(void);
int destSoundSystem(void);
int updateSoundSystem(void);
HNODE loadSound(ZSTRING strSoundName, ZSTRING strWaveFileName, int iNumBuffers);
int unloadSound(HNODE hSound);
int setSoundPosition(HNODE hSound, float fPosition[3]);
int playSound(HNODE hSound, int bLoop);
int stopSound(HNODE hSound);
int getSoundState(HNODE hSound);
float getVectorAngle(float vVector1[3], float vVector2[3]);
HNODE loadSkyMaterial(ZSTRING pMaterialName, HNODE hShader, ZSTRING pMapFileName1, ZSTRING pMapFileName2);
int setSkyMaterialBlendRatio(HNODE hMat, float fBlendRatio);
int getVisibleAABB(HNODE hVisible_In, float vMin_Out[3], float vMax_Out[3]);
int getVisibleSphere(HNODE hVisible_In, float vCenter_Out[3], float * fRadius_Out);
int intersectRayNormal(HNODE hVisible_In, float vRayOrigin_In[3], float vRayDirection_In[3], float vContactPoint_Out[3], float vContactNormal_Out[3]);
int logTextures(void);
int getModelCOMPositionWorld(HNODE hModel, float vCenterOfMass[3]);
int getModelCOMPositionLocal(HNODE hModel, float vCenterOfMass[3]);
int getModelBonePositionWorld(HNODE hModel, int BoneIndex, float vPosition[3]);
void InputModelCollisionBlock(HNODE hModel, HNODE hBlock);
HNODE OutPutModelCollisionBlock(HNODE hModel);
void InputModelGravity(HNODE hModel);
void stopModelRotation(HNODE hModel);
int setVisibleRangeFromCamera(HNODE hVisible, float fDistanceFromCameraStart, float fDistanceFromCameraEnd);
int pushSpecialEffect(int iEffectID);
int popSpecialEffect(void);
int clearSpecialEffect(void);
int getTextureSize(HNODE hTexture, int& iWidth_Out, int& iHeight_Out);
int setModelNormal(HNODE hModel, float vNormal[3]);
int shakeCamera(HNODE hCamera, float vMin[3], float vMax[3], int iTimeMSEC);
int getVisibleVelocity(HNODE hVisible, float vVelocityVector[3]);
int setVisibleVelocity(HNODE hVisible, float vVelocityVector[3]);
int setVisibleGlow(HNODE hVisible, int iGlowType, float fRed, float fGreen, float fBlue);
int setVisibleGlowRecursive(HNODE hVisible, int iGlowType, float fRed, float fGreen, float fBlue);
int setVisibleRenderUnitGlow(HNODE hVisible, int iRenderUnit, int iGlowType, float fRed, float fGreen, float fBlue);
int zeroVisibleVelocityZ(HNODE hVisible);
int setGravity(float vGravityVector[3]);
int setGravityScript(float fGravityX, float fGravityY, float fGravityZ);
int getModelInitialCOMPosition(HNODE hModel, float vPositionOut[3]);
int useGravity(HNODE hVisible, int bUseOrNot);
int setVisibleForce(HNODE hVisible, float vForceVector[3]);
bool IsAnimatable(HNODE hVisible);
int setVisibleJump(HNODE hVisible, float fJumpForce);
float getGravityVelocityZ(HNODE hVisible);
int setAdapter(int iAdapterIndex);
int getNumAdapter(void);
int setMonitorRefreshRate(int iRefreshRate);
int getMonitorRefreshRate(void);
int dumpResourcesInViewstrum(int bTerrain, int bOcean, int bOpaque, int bTransparent);
ZSTRING readLogString(int iNumLatest, ZSTRING pStrLineBreakingMsg);
HNODE returnHNODE(HNODE hNode);
ZSTRING getEngineVersion(void);
HNODE loadCursor(ZSTRING pCursorName, HCURSOR hCursorWIN32);
int unloadCursor(HNODE hCursor);
int showCursor(HNODE hCursor);
int setCursorPosition(HNODE hCursor, int iX, int iY);
int drawLine(float vStart[3], float vEnd[3], ZZ_COLOR Color);
int drawAABB(float vMin[3], float vMax[3], ZZ_COLOR Color);
void ScreenFadeInStart(float fade_in_t,float fade_m_t,float fade_out_t,int color_r,int color_g,int color_b); 
void ScreenTransition(int state,float time);
void ObserverCameraTransform(int mouse_xx,int mouse_yy);
void ObserverCameraZoomInOut(int delta);
void SetObserverCameraOnOff();
void SetObserverCameraOnOff2(float xPos, float yPos, float zPos);
void DrawArrow(float size,int color);
void DrawAxis(float size);
void DrawAxisEx(float *q, float *v, float size);
void DrawOBBBox(float *q, float *v, float xx, float yy, float zz);
bool GetObserverCameraOnOff();
void SetOceanSFXOnOff(bool onoff);
void StopScreenFadeInOut();
void PlayWideScreen(float screen_ratio);
void PlayWideScreenEx(int x,int y ,int width,int height);
void StopWideScreen();
void UserObserverCamera(int bUse);
void CameraEffectTest(float Yaw, float Pitch ,float Distance ,float Time);
void InputSceneSphere(float x, float y, float z, float r);
void InputSceneOBBNode(HNODE hVisible);
void InputSceneOBB2(float Center[3], float RotationWXYZ[4], float xLength, float yLength, float zLength);
void InputSceneAABB(float vMin[3], float vMax[3], ZZ_COLOR Color);
void InputSceneCylinder(float x, float y, float z, float length, float r);
void InputSceneLine(float Vec1[3], float Vec2[3]);
void InputSceneAxis(HNODE hVisible, float Size);
void ResetSceneSphere();
void ResetSceneOBB();
void ResetSceneAABB();
void ResetSceneCylinder();
void ResetSceneLine();
void ResetSceneAxis();
void DrawAnimatableMovingPath(HNODE hNODE);
void DrawCameraMovingPath(HNODE hMotion, float vPosition[3] , float OutPosition[3], float OutRotation[4]);
void DrawCameraMovingPathOnly(HNODE hMotion, float vPosition[3]);
void saveScreenshots(int bStart, int iFileType, int iNumSkipFrame);
void drawSpriteSFX();
void setAvatarViewPort(float x, float y, float width, float height);
void setMovingCameraViewPort(int x, int y, int width, int height);
void setMovingCameraDefaultViewPort();
void InputMovingCameraMatrix(float vPosition[3], float vRotation[4]);
void setDefaultViewPort();
void updateAvatarSelectionCameraLength(float step);
void updateAvatarSelectionCameraSeta(float step);
void updateAvatarSelectionCameraHeight(float step);
void RenderSelectedAvatar(HNODE hModel);
void LoadSelectedAvatarBackGroundTexture(ZSTRING pTexFileName);
void InputForcedMovingCameraElement(float *vPosition, float *vRotation, float time);
void setForcedMoveCamera(float *vPosition, float *vRotation);
void InputForcedMovingCameraSystemElement(float *vPosition, float *vRotation, float *vElement, float time);
bool IsForcedMovingCameraState();
void CulledModelAnimationRevision(HNODE hModel); 
bool GetMotionInterpolation();
void getAnimatableMotionTime(HNODE hAnimatable, float *currentTime, float *totalTime);
void SetFogOffMode(bool fogState);
int getLight(HNODE hLight, ZSTRING pProperty, float *fValue);
void GetObserverCameraPosXY(float *xPos, float *yPos);
void SetObserverCameraPosZ(float zPos);
void SetObserverCameraSpeed(float fSpeed);
void SetObserverCameraBaseRotation(float fAngle);
void SetObserverCameraRotationPhi(float fAngle);
void SetObserverCameraSideSpeed(float fSpeed);
void SetObserverCameraHeightSpeed(float fSpeed);
void SetModelCameraCollisionOnOff(HNODE hModel, bool bCollisionOnOff);
void SetForcedMotionMixOff(HNODE hModel, bool bOnOff);
int drawFont(HNODE hFont, int bUseSprite, int iX, int iY, const char * pMsg);
int drawFont(HNODE hFont, int bUseSprite, int iX, int iY, ZZ_COLOR Color, const char * pMsg);
int drawFontOutLine(HNODE hFont, int bUseSprite, int iX, int iY, ZZ_COLOR Color, ZZ_COLOR OutLineColor, const char * pMsg);
int drawFont(HNODE hFont, int bUseSprite, ZZ_RECT * pRect, const char * pMsg);
int drawFont(HNODE hFont, int bUseSprite, ZZ_RECT * pRect, ZZ_DWORD dwFormat, const char * pMsg);
int drawFont(HNODE hFont, int bUseSprite, ZZ_RECT * pRect, ZZ_COLOR Color, ZZ_DWORD dwFormat, const char * pMsg);
int drawFontf(HNODE hFont, int bUseSprite, int iX, int iY, const char * pMsgFormat, ...);
int drawFontf(HNODE hFont, int bUseSprite, int iX, int iY, ZZ_COLOR Color, const char * pMsgFormat, ...);
int drawFontf(HNODE hFont, int bUseSprite, ZZ_RECT * pRect, const char * pMsgFormat, ...);
int drawFontf(HNODE hFont, int bUseSprite, ZZ_RECT * pRect, ZZ_DWORD dwFormat, const char * pMsgFormat, ...);
int drawFontf(HNODE hFont, int bUseSprite, ZZ_RECT * pRect, ZZ_COLOR Color, ZZ_DWORD dwFormat, const char * pMsgFormat, ...);
